#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

R5.8 
NOTE: I am using the key pad provided in the book 

main method: 
Prompt user for input 
String number = 1-800-FLOWERS
sub = substring with last six characters 

String theNumber = “”; 

Go through sub string character by character and pass each letter as a char to decryption method, build theNumber string with the result.
theNumber = theNumber + decryption(char) //

end of main method 


decryption method (char letter):

If ( letter == ‘A’ || letter == ‘B’ || letter == ‘C’){
	return “2”; 
} 
else if ( letter == ‘D’ || letter == ‘E’ || letter == ‘F’){
	return “3”;
…

else (letter == ‘X’ || letter == ‘Y’ || letter == ‘Z’) 
	return “9”

end of decryption method 

R5.10 

Variables in the scope of main method: 
i - also in the scope of g method 
b

Variables in the scope of f method: 
n 
i - same as n in g method 

Variables in the scope of g method: 
a - the same as i in the main
b - different from b in main
n - also in the scope of f method 
i - different from i in main 


R5.14
In Java primitive variables are passed to a method by Value. 
Before calling falseSwap, main has x reference 3, y reference 4.
During the call, falseSwap declares and initializes temp, takes 3 and 4
and using temp switches values between its parameters a and b. In falseSwap, a  is initially 3 and b is 4
at the end of falseSwap method, a is 4 and b is 3. 
However, when control is passed back to main, x still references 3 and y references 4. 

R6.6
a) Arrays start at index 0 and end at index n-1 
Thus the loop: 
for(int i = 1; i <= 10; i++)
- Fills the array from index 1 to 9, instead of 0 to 9
- Goes out of bound as values[10] does not exist 

b) The array int[] values is declared but never initialized 

R6.10
a. ArrayList<int> value = new ArrayList<int>();
ArrayLists cannot be declared on primitive data, instead, if you want to use primitives in an ArrayList, declare the ArrayList on the wrapper class. 

b. ArrayList<Integer> values = new ArrayList(); 
The constructor is missing <> 

c. ArrayList<Integer> values = new ArrayList<Integer>; 
The constructor is missing () 

d. values.set(i-1, i*i) 
values is an empty array as no elements have been added to it. 
You cannot set values of any empty array. 

e. ArrayList<Integer> values is declared but not initialized 


R6.11 
Index is a value that keeps track of empty position where values can be stored inside the array. Typically, if an array is declared with index value n, elements can be stored between index values 0 and n-1 
If a user tries to store a value in index n, the compiler will generate an error. 

R6.21
temp = array[0]
for ( i = 0; i < array.length - 1; i++){
	array[i] = array[i+1]
}
array[array.length] = temp 


R6.23 
Given: “array” is a sorted array of integers 
Goal: insert i into a proper place (theElement) 

//first find where the element should be inserted 
for (index = 0; index < array.length; index++) {
	if (array[index] <= theElement && array[index+1] >= theElement){
		break;
	} 
}

//insert theElement into a correct location by moving all elements above it up by 1 
for (int counter = (array.length+1); counter > index; counter—-){
	array[counter] = array[counter-1] 
	}
array[index] = theElement 


R6.25
In Java method parameters are passed by value. 

When one array variable is assigned to another array variable, both of the arrays point to
the same location in memory.

Since method parameters are passed by value, when an array variable is passed in a method and assigned to an array declared and initialized inside the method, the values associated with the initialized array are not assigned to the array passed as a parameter of a function.   


7.6
In Java exceptions fall into three categories. 
1) Internal error are reported by descendants of the type Error. 
2) Unchecked Exceptions, which hare descendants of RuntimeException. 
Eg. IndexOutOfBoundsException 
3) All other exceptions are checked exceptions. 
Eg. FileNotFound Exception
Checked exceptions can be handled with a throw reserve word. 

7.7
The compiler does not check whether you handle unchecked expressions, since they are usually caused by carelessness of the programmer. Programmers own mistakes are his responsibility. Index out of bounds is that type of error

7.9
If an exceptions is not handled, an error is printed and the program terminates. 


7.14 
The Scanner.next can throw a NoSuchElement exception 
Scanner.nextInt can throw NumberFormat exception 


